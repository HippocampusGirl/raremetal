void FastTransform::SelectSamplesVCF(Pedigree & ped,bool useCovariates)
{
   //   printf("Selecting useful samples ...\n");
   VcfFileReader reader;
   VcfHeader header;
   VcfRecord record;
   reader.open(PreMeta::vcfInput,header);
   int numSamples = header.getNumSamples();
   totalN=numSamples;
   reader.close();

   StringIntHash VCFID;
   for(int s=0;s<numSamples;s++)
   {
      const char * sample = header.getSampleName(s);
      VCFID.SetInteger(sample,s);
   }

   for (int i = 0; i < ped.count; i++)
   {
printf("i=%d\n",i);
      //check if this a sample is phenotyped at least one trait
      bool phenotyped =false;
      for(int tr=0;tr<ped.traitNames.Length();tr++)
      {
	 if(ped[i].isPhenotyped(tr))
	 {
	    phenotyped=true;
	    break;
	 }
      }
      //if (phenotyped && (!useCovariates || ped[i].isFullyControlled()))
      if (!phenotyped)
	 continue;
      //get the sample # from VCF 
      int s;
      if(mergedVCFID)
      {
	 String sample = ped[i].famid+"_"+ped[i].pid;
	 s = VCFID.Integer(sample);
      }
      else
      {
	 s = VCFID.Integer(ped[i].pid);
      }

      if(s==-1)
	 continue;
      //check if this sample is genotyped at least one site.
      reader.open(PreMeta::vcfInput,header);
      //screen out individuals who are not genotyped at all
      bool reject = true;
      while(reader.readRecord(record))
      {
	 VcfRecordGenotype & genoInfo = record.getGenotypeInfo();
	 if(PreMeta::dosage)
	 {
	    const std::string * geno = genoInfo.getString(PreMeta::dosageFlag.c_str(),s);
	    if(!geno)
	    {
	       error("RAREMETALWORKER could not find dosage in \"%s\" field in VCF file!",PreMeta::dosageFlag.c_str());
	    }

	    if(*geno != ".")
	    {
	       reject = false;
	       break;
	    }
	 }
	 else
	 {
	    int numGTs = record.getNumGTs(s);
	    int bad =0;
	    for(int j = 0; j < numGTs; j++)
	    {
	       if(record.getGT(s,j) == VcfGenotypeSample::MISSING_GT)
		  bad++;
	    }
	    if(bad==0)
	    {
	       reject=false;
	       break;
	    }
	 }
      }
      reader.close();

      if(reject) continue;
      //printf("%s\n",ped[i].pid.c_str());
      if(mergedVCFID)
      {
	 String sample = ped[i].famid+"_"+ped[i].pid;
	 sampleVCFIDHash.SetInteger(sample,s);
      samplePEDIDHash.SetInteger(sample,i);
      }
      else
{
	 sampleVCFIDHash.SetInteger(ped[i].pid,s);
      samplePEDIDHash.SetInteger(ped[i].pid,i);
}
      genotypedSampleVCF.Push(s);
   }
}
